# 开启OPTIMIZER_TRACE
SET OPTIMIZER_TRACE="enabled=on",END_MARKERS_IN_JSON=on;
SET optimizer_trace_offset=-30, optimizer_trace_limit=30;
# 执行业务SQL
select *
from salaries
where from_date = '1986-06-26' and to_date = '1987-06-26';
# 查看跟踪信息
SELECT * FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE limit 30;
# 跟踪结果展示
TRACE: {
	"steps": [{
			# 准备阶段的执行过程
			"join_preparation": {
				"select#": 1,
				"steps": [{
					"expanded_query": "/* select#1 */ select `salaries`.`emp_no` AS `emp_no`,`salaries`.`salary` AS `salary`,`salaries`.`from_date` AS `from_date`,`salaries`.`to_date` AS `to_date` from `salaries` where ((`salaries`.`from_date` = '1986-06-26') and (`salaries`.`to_date` = '1987-06-26'))"
				}] /* steps */
			} /* join_preparation */
		},
		{
			# 优化阶段的执行过程，是分析OPTIMIZER_TRACE的重点
			"join_optimization": {
				"select#": 1,
				"steps": [{
						# 条件处理，主要对WHERE条件进行优化处理
						"condition_processing": {
							# 优化的对象类型，比如WHERE 或者 HAVING
							"condition": "WHERE",
							# 优化前的原始语句
							"original_condition": "((`salaries`.`from_date` = '1986-06-26') and (`salaries`.`to_date` = '1987-06-26'))",
							# 主要包括三步，分别是quality_propagation（）、constant_propagation（）、trivial_condition_removal（）
							"steps": [
							    # 等值条件句转换
							    {
									# 转换类型句
									"transformation": "equality_propagation",
									# 转换之后的结果输出
									"resulting_condition": "(multiple equal('1986-06-26', `salaries`.`from_date`) and multiple equal('1987-06-26', `salaries`.`to_date`))"
								},
								# 常量条件句转换
								{
									# 转换类型句
									"transformation": "constant_propagation",
									# 转换之后的结果输出
									"resulting_condition": "(multiple equal('1986-06-26', `salaries`.`from_date`) and multiple equal('1987-06-26', `salaries`.`to_date`))"
								},
								# 无效条件移除的转换
								{
									# 转换类型句
									"transformation": "trivial_condition_removal",
									# 转换之后的结果输出
									"resulting_condition": "(multiple equal(DATE'1986-06-26', `salaries`.`from_date`) and multiple equal(DATE'1987-06-26', `salaries`.`to_date`))"
								}
							] /* steps */
						} /* condition_processing */
					},
					{
						# 用于替换虚拟生成列
						"substitute_generated_columns": {} /* substitute_generated_columns */
					},
					{
						# 分析表之间的依赖关系
						"table_dependencies": [{
							# 涉及的表名，如果有别名，也会展示出来
							"table": "`salaries`",
							# 行是否可能为NULL，这里指JOIN操作之后，这张表里的数据是不是可能为NULL。如果语句中使用了LEFT JOIN，则后一张表row_may_be_null会显示为true
							"row_may_be_null": false,
							# 表的映射编号，从0开始递增
							"map_bit": 0,
							# 依赖的映射表，当使用STRAIGHT JOIN强行控制连接顺序或者LEFT JOIN/RIGHT JOIN有顺序差别时，会在depends_on_map_bits中展示前置表的map_bit值
							"depends_on_map_bits": [] /* depends_on_map_bits */
						}] /* table_dependencies */
					},
					{
						# 列出所有可用的ref类型的索引，如果使用了组合索引的多个部分，则会在ref_optimizer_key_uses下列出多个元素，每个元素中会列出ref使用的索引及对应值
						"ref_optimizer_key_uses": [{
								"table": "`salaries`",
								"field": "from_date",
								"equals": "DATE'1986-06-26'",
								"null_rejecting": false
							},
							{
								"table": "`salaries`",
								"field": "to_date",
								"equals": "DATE'1987-06-26'",
								"null_rejecting": false
							}
						] /* ref_optimizer_key_uses */
					},
					{
						# 估算需要扫描的记录数
						"rows_estimation": [{
							# 表名
							"table": "`salaries`",
							"range_analysis": {
								# 如果全表扫描的话，需要扫描多少行，以及需要的代价
								"table_scan": {
									"rows": 2838216,
									"cost": 286799
								} /* table_scan */ ,
								# 列出表中所有的索引，并分析其是否可用。如果不可用的话，会列出不可用的原因是什么，如果可用会列出索引中可用的字段
								"potential_range_indexes": [{
										"index": "PRIMARY",
										"usable": false,
										"cause": "not_applicable"
									},
									{
										"index": "salaries_from_date_to_date_index",
										"usable": true,
										"key_parts": [
											"from_date",
											"to_date",
											"emp_no"
										] /* key_parts */
									}
								] /* potential_range_indexes */ ,
								# 如果有下推的条件，则带条件考虑范围查询
								"setup_range_conditions": [] /* setup_range_conditions */ ,
								# 当使用了GROUP BY或者DISTINCT时，是否有合适的索引可用。当未使用GROUP BY或者DISTINCT时，会显示chosen=false，cause=not_group_by_or_distinct；如果使用了GROUP或者DISTINCT，但为多表查询时，则会显示chosen=false，cause=not_single_table。其他情况下会尝试分析索引（potential_group_range_indexes）并计算对应的扫描行数及其所需代价
								"group_index_range": {
									"chosen": false,
									"cause": "not_group_by_or_distinct"
								} /* group_index_range */ ,
								# 是否使用了skip scan，skip scan是MySQL 8.0的新特性
								"skip_scan_range": {
									"potential_skip_scan_indexes": [{
										"index": "salaries_from_date_to_date_index",
										"usable": false,
										"cause": "query_references_nonkey_column"
									}] /* potential_skip_scan_indexes */
								} /* skip_scan_range */ ,
								# 分析各个索引的使用成本
								"analyzing_range_alternatives": {
									# range扫描分析
									"range_scan_alternatives": [{
										# 索引名
										"index": "salaries_from_date_to_date_index",
										# range扫描的条件范围
										"ranges": [
											"0xda840f <= from_date <= 0xda840f AND 0xda860f <= to_date <= 0xda860f"
										] /* ranges */ ,
										# 是否使用了index dive，该值会被参数eq_range_index_dive_limit变量值影响
										"index_dives_for_eq_ranges": true,
										# 该range扫描的结果集是否根据主键值进行排序
										"rowid_ordered": true,
										# 是否使用了MRR
										"using_mrr": false,
										# 表示是否使用了覆盖索引
										"index_only": false,
										# 扫描的行数
										"rows": 86,
										# 索引的使用成本
										"cost": 50.909,
										# 表示是否使用了索引
										"chosen": true
									}] /* range_scan_alternatives */ ,
									# 分析是否使用了索引合并(index merge)，如果未使用，会在cause中展示原因；如果使用了索引合并，会在该部分展示索引合并的代价
									"analyzing_roworder_intersect": {
										"usable": false,
										"cause": "too_few_roworder_scans"
									} /* analyzing_roworder_intersect */
								} /* analyzing_range_alternatives */ ,
								# 在前一个步骤中分析了各类索引使用的方法及代价，得出了一定的中间结果之后，在summary阶段汇总前一阶段的中间结果确认最后的方案
								"chosen_range_access_summary": {
									# range扫描最终选择的执行计划
									"range_access_plan": {
										# 展示执行计划的type，如果使用了索引合并，则会展示index_roworder_intersect
										"type": "range_scan",
										# 索引名
										"index": "salaries_from_date_to_date_index",
										# 扫描的行数
										"rows": 86,
										# range扫描的条件范围
										"ranges": [
											"0xda840f <= from_date <= 0xda840f AND 0xda860f <= to_date <= 0xda860f"
										] /* ranges */
									} /* range_access_plan */ ,
									# 该执行计划的扫描行数
									"rows_for_plan": 86,
									# 该执行计划的执行代价
									"cost_for_plan": 50.909,
									# 是否选择该执行计划
									"chosen": true
								} /* chosen_range_access_summary */
							} /* range_analysis */
						}] /* rows_estimation */
					},
					{
						# 负责对比各可行计划的开销，并选择相对最优的执行计划
						"considered_execution_plans": [{
							# 当前计划的前置执行计划
							"plan_prefix": [] /* plan_prefix */ ,
							# 涉及的表名，如果有别名，也会展示出来
							"table": "`salaries`",
							# 通过对比considered_access_paths，选择一个最优的访问路径
							"best_access_path": {
								# 当前考虑的访问路径
								"considered_access_paths": [{
										# 使用索引的方式
										"access_type": "ref",
										# 索引
										"index": "salaries_from_date_to_date_index",
										# 行数
										"rows": 86,
										# 开销
										"cost": 50.412,
										# 是否选用这种执行路径
										"chosen": true
									},
									{
										"access_type": "range",
										"range_details": {
											"used_index": "salaries_from_date_to_date_index"
										} /* range_details */ ,
										"chosen": false,
										"cause": "heuristic_index_cheaper"
									}
								] /* considered_access_paths */
							} /* best_access_path */ ,
							# 类似于explain的filtered列，是一个估算值
							"condition_filtering_pct": 100,
							# 执行计划最终的扫描行数，由considered_access_paths.rows * condition_filtering_pct计算获得
							"rows_for_plan": 86,
							# 执行计划的代价，由considered_access_paths.cost相加获得
							"cost_for_plan": 50.412,
							# 是否选择了该执行计划
							"chosen": true
						}] /* considered_execution_plans */
					},
					{
						# 基于considered_execution_plans中选择的执行计划，改造原有的where条件，并针对表增加适当的附加条件，以便于单表数据的筛选，主要是为了便于索引条件下推（ICP），但ICP是否开启并不影响这部分内容的构造
						"attaching_conditions_to_tables": {
							# 原始的条件语句
							"original_condition": "((`salaries`.`to_date` = DATE'1987-06-26') and (`salaries`.`from_date` = DATE'1986-06-26'))",
							# 使用启发式算法计算已使用的索引，如果已使用的索引的访问类型是ref，则计算用range能否使用组合索引中更多的列，如果可以，则用range的方式替换ref
							"attached_conditions_computation": [] /* attached_conditions_computation */ ,
							# 附加之后的情况汇总
							"attached_conditions_summary": [{
								# 表名
								"table": "`salaries`",
								# 附加的条件或原语句中能直接下推给单表筛选的条件
								"attached": "((`salaries`.`to_date` = DATE'1987-06-26') and (`salaries`.`from_date` = DATE'1986-06-26'))"
							}] /* attached_conditions_summary */
						} /* attaching_conditions_to_tables */
					},
					{
						# 最终的、经过优化后的表条件
						"finalizing_table_conditions": [{
							"table": "`salaries`",
							"original_table_condition": "((`salaries`.`to_date` = DATE'1987-06-26') and (`salaries`.`from_date` = DATE'1986-06-26'))",
							"final_table_condition   ": null
						}] /* finalizing_table_conditions */
					},
					{
						# 改善执行计划
						"refine_plan": [{
							"table": "`salaries`"
						}] /* refine_plan */
					}
				] /* steps */
			} /* join_optimization */
		},
		{
			# 执行阶段的执行过程
			"join_execution": {
				"select#": 1,
				"steps": [] /* steps */
			} /* join_execution */
		}
	] /* steps */
}